// 1.ดัชนีชี้วัดการจัดการน้ำมิติต้นทุนทรัพยากรน้ำ (Resources, R)
// :1,6) ปริมาณน้ำบาดาลที่พัฒนามาใช้ต่อประชากร => คำนวณได้
// CubicMeterGroundWaterForUse
// CountPopulation
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE",
      AdjustedCubicMeterGroundWaterForUse: "FALSE",
      CanComputeCubicMeterGroundWaterForUse: "True"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumCubicMeterGroundWaterForUse: {
        $sum: "$CubicMeterGroundWaterForUse"
      },
      sumPopulation: {
        $sum: "$CountPopulation"
      }
    }
  },
  {
    $project: {
      DevGroundWaterForUse: {
        $cond: {
          if: {
            $eq: ["$sumPopulation", 0]
          },
          then: 0,
          else: {
            $divide: ["$sumCubicMeterGroundWaterForUse", "$sumPopulation"]
          }
        }
      }
    }
  },
  { $out: "TestDevGroundWaterForUse" }
]);

// 2.ดัชนีชี้วัดการจัดการน้ำมิติการจัดการน้ำเพื่อการอุปโภค บริโภค (Household consumption, H)
// (1) ครัวเรือนในชนบทที่มีน้ำประปาใช้ต่อคร้วเรือนในชนบททั้งหมด => คำนวณได้
// IsHouseHoldHasPlumbingCountryside
// IsAllHouseHoldCountryside
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumIsHouseHoldHasPlumbingCountryside: {
        $sum: "$IsHouseHoldHasPlumbingCountryside"
      },
      sumIsAllHouseHoldCountryside: {
        $sum: "$IsAllHouseHoldCountryside"
      }
    }
  },
  {
    $project: {
      HouseHoldHasPlumbingCountryside: {
        $cond: {
          if: {
            $eq: ["$sumIsAllHouseHoldCountryside", 0]
          },
          then: { $multiply: [0, 100] },
          else: {
            $multiply: [
              {
                $divide: [
                  "$sumIsHouseHoldHasPlumbingCountryside",
                  "$sumIsAllHouseHoldCountryside"
                ]
              },
              100
            ]
          }
        }
      }
    }
  },
  { $out: "TestHouseHoldHasPlumbingCountryside" }
]);

// 2.ดัชนีชี้วัดการจัดการน้ำมิติการจัดการน้ำเพื่อการอุปโภค บริโภค (Household consumption, H)
// (2) ครัวเรือนในเขตเมืองที่มีน้ำประปาใช้ต่อคร้วเรือนในเขตเมืองทั้งหมด => คำนวณได้
// IsHouseHoldHasPlumbingDistrict
// IsAllHouseHoldDistrict
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumIsHouseHoldHasPlumbingDistrict: {
        $sum: "$IsHouseHoldHasPlumbingDistrict"
      },
      sumIsAllHouseHoldDistrict: {
        $sum: "$IsAllHouseHoldDistrict"
      }
    }
  },
  {
    $project: {
      HouseHoldHasPlumbingDistrict: {
        $cond: {
          if: {
            $eq: ["$sumIsAllHouseHoldDistrict", 0]
          },
          then: { $multiply: [0, 100] },
          else: {
            $multiply: [
              {
                $divide: [
                  "$sumIsHouseHoldHasPlumbingDistrict",
                  "$sumIsAllHouseHoldDistrict"
                ]
              },
              100
            ]
          }
        }
      }
    }
  },
  { $out: "TestHouseHoldHasPlumbingDistrict" }
]);

// 2.ดัชนีชี้วัดการจัดการน้ำมิติการจัดการน้ำเพื่อการอุปโภค บริโภค (Household consumption, H)
// (3) สถานที่ราชการที่มีน้ำประปาใช้ต่อสถานที่ราชการทั้งหมด => คำนวณได้
// IsGovernmentUsage
// IsGovernment
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumIsGovernmentUsage: {
        $sum: "$IsGovernmentUsage"
      },
      sumIsGovernment: {
        $sum: "$IsGovernment"
      }
    }
  },
  {
    $project: {
      PlumbingGovernmentUsage: {
        $cond: {
          if: {
            $eq: ["$sumIsGovernment", 0]
          },
          then: { $multiply: [0, 100] },
          else: {
            $multiply: [
              {
                $divide: ["$sumIsGovernmentUsage", "$sumIsGovernment"]
              },
              100
            ]
          }
        }
      }
    }
  },
  {
    $out: "TestPlumbingGovernmentUsage"
  }
]);

// 2.ดัชนีชี้วัดการจัดการน้ำมิติการจัดการน้ำเพื่อการอุปโภค บริโภค (Household consumption, H)
// (4) ครัวเรือนที่มีน้ำประปาคุณภาพดีต่อคร้วเรือนทั้งหมด => คำนวณได้
// IsHouseHoldGoodPlumbing
// IsHouseHold
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumIsHouseHoldGoodPlumbing: {
        $sum: "$IsHouseHoldGoodPlumbing"
      },
      sumIsHouseHold: {
        $sum: "$IsHouseHold"
      }
    }
  },
  {
    $project: {
      HouseHoldGoodPlumbing: {
        $cond: {
          if: {
            $eq: ["$sumIsHouseHold", 0]
          },
          then: { $multiply: [0, 100] },
          else: {
            $multiply: [
              { $divide: ["$sumIsHouseHoldGoodPlumbing", "$sumIsHouseHold"] },
              100
            ]
          }
        }
      }
    }
  },
  {
    $out: "TestHouseHoldGoodPlumbing"
  }
]);

// 2.ดัชนีชี้วัดการจัดการน้ำมิติการจัดการน้ำเพื่อการอุปโภค บริโภค (Household consumption, H)
// (5) ปริมาณการใช้น้ำอุปโภค บริโภคต่อคน => คำนวณได้
// CubicMeterGroundWaterForDrink
// CubicMeterPlumbingForDrink
// CubicMeterSurfaceForDrink
// CountPopulation
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE",
      // CubicMeterGroundWaterForDrink
      AdjustedCubicMeterGroundWaterForDrink: "FALSE",
      CanComputeCubicMeterGroundWaterForDrink: "True",
      // CubicMeterPlumbingForDrink
      CanComputeCubicMeterPlumbingForDrink: "True",
      // CubicMeterSurfaceForDrink
      AdjustedCubicMeterSurfaceForDrink: "FALSE",
      CanComputeCubicMeterSurfaceForDrink: "True"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumCubicMeterGroundWaterForDrink: {
        $sum: "$CubicMeterGroundWaterForDrink"
      },
      sumCubicMeterPlumbingForDrink: {
        $sum: "$CubicMeterPlumbingForDrink"
      },
      sumCubicMeterSurfaceForDrink: {
        $sum: "$CubicMeterSurfaceForDrink"
      },
      sumCountPopulation: {
        $sum: "$CountPopulation"
      }
    }
  },
  {
    $project: {
      WaterUsagePerPeople: {
        $divide: [
          {
            $add: [
              "$sumCubicMeterGroundWaterForDrink",
              "$sumCubicMeterPlumbingForDrink",
              "$sumCubicMeterSurfaceForDrink"
            ]
          },
          "$sumCountPopulation"
        ]
      }
    }
  },
  {
    $out: "TestWaterUsagePerPeople"
  }
]);

db.c88.find({
  Area_Code: "380101"
});

// Edit Data
db.c88.update(
  {
    Area_Code: { $ne: null },
    Duplicate: "FALSE",
    IsHouseHold: 1
  },
  {
    $set: {
      IsAllHouseHoldDistrict: {
        $cond: {
          if: {
            $and: [
              { Ea: { $ne: null } },
              { $eq: [{ $substr: ["$EA", 7, 1] }, "1"] }
            ]
          },
          then: 1,
          else: 0
        }
      },
      IsAllHouseHoldCountryside: {
        $cond: {
          if: {
            $and: [
              { EA: { $ne: null } },
              { $eq: [{ $substr: ["$EA", 7, 1] }, "2"] }
            ]
          },
          then: 1,
          else: 0
        }
      }
    }
  },
  { multi: true }
);
// many aggregate in update
db.c88.update(
  {
    Area_Code: { $ne: null },
    Duplicate: "FALSE",
    IsHouseHold: 1
  },
  [
    {
      $set: {
        IsAllHouseHoldDistrict: {
          $cond: {
            if: {
              $and: [
                { Ea: { $ne: null } },
                { $eq: [{ $substr: ["$EA", 7, 1] }, "1"] }
              ]
            },
            then: 1,
            else: 0
          }
        }
      }
    },
    {
      $set: {
        IsAllHouseHoldCountryside: {
          $cond: {
            if: {
              $and: [
                { EA: { $ne: null } },
                { $eq: [{ $substr: ["$EA", 7, 1] }, "2"] }
              ]
            },
            then: 1,
            else: 0
          }
        }
      }
    }
  ],
  { multi: true }
);
db.version();

// Test Join
db.BaseCollection3.aggregate([
  {
    $lookup: {
      from: "TestDevGroundWaterForUse",
      localField: "_id",
      foreignField: "_id",
      as: "collection0"
    }
  },
  {
    $lookup: {
      from: "TestHouseHoldGoodPlumbing",
      localField: "_id",
      foreignField: "_id",
      as: "collection1"
    }
  },
  {
    $lookup: {
      from: "TestHouseHoldHasPlumbingDistrict",
      localField: "_id",
      foreignField: "_id",
      as: "collection2"
    }
  },
  {
    $lookup: {
      from: "TestHouseHoldHasPlumbingCountryside",
      localField: "_id",
      foreignField: "_id",
      as: "collection3"
    }
  },
  {
    $replaceRoot: {
      newRoot: {
        $mergeObjects: [
          { $arrayElemAt: ["$collection0", 0] },
          { $arrayElemAt: ["$collection1", 0] },
          { $arrayElemAt: ["$collection2", 0] },
          { $arrayElemAt: ["$collection3", 0] },
          "$$ROOT"
        ]
      }
    }
  },
  {
    $project: {
      collection0: 0,
      collection1: 0,
      collection2: 0,
      collection3: 0
    }
  },
  {
    $out: "TestJoinFinal4"
  }
]);

db.c88.aggregate([
  {
    $match: {
      Area_Code: { $ne: null }
    }
  },
  {
    $group: {
      _id: "$Area_Code"
    }
  },
  {
    $out: "BaseCollection"
  }
]);

db.ea.aggregate([
  {
    $group: {
      _id: "$Area_Code"
    }
  },
  {
    $sort: {
      _id: 1
    }
  },
  // {
  //   $project: {
  //     DevGroundWaterForUse: null,
  //     HouseHoldGoodPlumbing: null,
  //     HouseHoldHasPlumbingDistrict: null,
  //     HouseHoldHasPlumbingCountryside: null
  //   }
  // },
  {
    $out: "BaseCollection"
  }
]);

db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $project: {
      checkError: {
        $gt: ["$ResidentialPersonCount", "$PopulationPersonCount"]
      }
    }
  },
  {
    $out: "checkPersonCount"
  }
]);

// errorIsAgriculture
db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $project: {
      checkError: {
        $lt: ["$IsAgriculture", "$IsAgricultureHasIrrigationField"]
      }
    }
  },
  {
    $out: "errorIsAgriculture"
  }
]);

// errorIsHouseHold
db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $project: {
      checkError: {
        $or: [
          {
            $lt: ["$IsHouseHold", "$IsHouseHoldGoodPlumbing"]
          },
          {
            $lt: ["$IsHouseHold", "$IsHouseHoldHasPlumbingDistrict"]
          },
          {
            $lt: ["$IsHouseHold", "$IsHouseHoldHasPlumbingCountryside"]
          }
        ]
      }
    }
  },
  {
    $out: "errorIsHouseHold"
  }
]);

// errorIsFactorial
db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $project: {
      checkError: {
        $or: [
          {
            $lt: ["$IsAllFactorial", "$IsFactorial"]
          },
          {
            $lt: ["$IsAllFactorial", "$IndustryHasWasteWaterTreatment"]
          },
          {
            $lt: ["$IsAllFactorial", "$IsFactorialWaterTreatment"]
          },
          {
            $lt: ["$IsAllFactorial", "$IsFactorialWaterQuality"]
          },
          {
            $lt: ["$IsFactorial", "$IndustryHasWasteWaterTreatment"]
          },
          {
            $lt: [
              "$IndustryHasWasteWaterTreatment",
              "$IsFactorialWaterTreatment"
            ]
          }
        ]
      }
    }
  },
  {
    $out: "errorIsFactorial"
  }
]);

// errorIsAllCommercial
db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $project: {
      checkError: {
        $lt: ["$IsAllCommercial", "$IsCommercialWaterQuality"]
      }
    }
  },
  {
    $out: "errorIsAllCommercial"
  }
]);

// test
db.v5.aggregate(
  [
    {
      $match: {
        EA: { $ne: null },
        Area_Code: { $ne: null },
        Duplicate: false
      }
    },
    {
      $group: {
        _id: "$CWT",
        listCwt: {
          $push: {
            _id: "$_id",
            SampleId: "$SampleId,SampleId",
            SampleType: "$SampleType,",
            EA: "$EA",
            Status: "$Status",
            CountPopulation: "$CountPopulation",
            CountWorkingAge: "$CountWorkingAge",
            ResidentialPersonCount: "$ResidentialPersonCount",
            PopulationPersonCount: "$PopulationPersonCount",
            Area_Code: "$Area_Code,",
            REG: "$REG",
            REG_NAME: "$REG_NAME",
            CWT: "$CWT",
            CWT_NAME: "$CWT_NAME",
            AMP: "$AMP",
            AMP_NAME: "$AMP_NAME",
            TAM: "$TAM",
            TAM_NAME: "$TAM_NAME",
            DISTRICT: "$DISTRICT",
            MUN: "$MUN",
            MUN_NAME: "$MUN_NAME",
            TAO: "$TAO",
            TAO_NAME: "$TAO_NAME"
          }
        }
      }
    },
    {
      $out: "Gunt78"
    }
  ],
  {
    allowDiskUse: true
  }
);

db.v5.aggregate([
  {
    $match: {
      EA: "11001021000025",
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      sumCountPopulation: {
        $sum: "$CountPopulation"
      },
      sumCountWorkingAge: {
        $sum: "$CountWorkingAge"
      },
      sumResidentialPersonCount: {
        $sum: "$ResidentialPersonCount"
      },
      sumPopulationPersonCount: {
        $sum: "$PopulationPersonCount"
      }
    }
  },
  {
    $out: "sumTestPao"
  }
]);

db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      SampleType: "u",
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      countUnit: {
        $sum: 1
      }
    }
  },
  {
    $out: "countUnit"
  }
]);

db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      SampleType: "b",
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      countBuilding: {
        $sum: 1
      }
    }
  },
  {
    $out: "countBuilding"
  }
]);

db.v5.count({ EA: "11001011000001", SampleType: "b", Duplicate: false });
db.v5.aggregate([
  {
    $match: {
      EA: "11001011000001",
      SampleType: "b",
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      sumB: {
        $sum: 1
      }
    }
  },
  {
    $out: "TestCountBuilding"
  }
]);

db.v5.aggregate([
  {
    $match: {
      EA: "11001011000001",
      SampleType: "u",
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      sumB: {
        $sum: 1
      }
    }
  },
  {
    $out: "TestCountUnit"
  }
]);

db.survey.aggregate([
  {
    $match: {
      SampleType: "b",
      Enlisted: true,
      DeletionDateTime: null
    }
  },
  {
    $group: {
      _id: "$EA",
      countBuilding: {
        $sum: 1
      }
    }
  },
  {
    $out: "countBuilding"
  }
]);

db.survey.aggregate([
  {
    $match: {
      SampleType: "u",
      Enlisted: true,
      DeletionDateTime: null
    }
  },
  {
    $group: {
      _id: "$EA",
      countBuilding: {
        $sum: 1
      }
    }
  },
  {
    $out: "countUnit"
  }
]);

db.ea.aggregate(
  [
    {
      $lookup: {
        from: "countBuilding",
        localField: "_id",
        foreignField: "_id",
        as: "data1"
      }
    },
    {
      $unwind: {
        path: "$data1",
        preserveNullAndEmptyArrays: true
      }
    },
    {
      $lookup: {
        from: "countUnit",
        localField: "_id",
        foreignField: "_id",
        as: "data2"
      }
    },
    {
      $unwind: {
        path: "$data2",
        preserveNullAndEmptyArrays: true
      }
    },
    {
      $project: {
        Area_Code: 1,
        REG: 1,
        REG_NAME: 1,
        CWT: 1,
        CWT_NAME: 1,
        AMP: 1,
        AMP_NAME: 1,
        TAM: 1,
        TAM_NAME: 1,
        DISTRICT: 1,
        MUN: 1,
        MUN_NAME: 1,
        TAO: 1,
        TAO_NAME: 1,
        EA: 1,
        CountBuilding: {
          $ifNull: ["$data1.countBuilding", 0]
        },
        CountUnit: {
          $ifNull: ["$data2.countBuilding", 0]
        }
      }
    },
    {
      $sort: {
        _id: 1
      }
    },
    {
      $out: "countBuildingAndUnit"
    }
  ],
  {
    allowDiskUse: true
  }
);

db.ResultPopulation.aggregate(
  [
    {
      $lookup: {
        from: "countBuildingAndUnit",
        localField: "_id",
        foreignField: "_id",
        as: "data"
      }
    },
    {
      $unwind: {
        path: "$data",
        preserveNullAndEmptyArrays: true
      }
    },
    {
      $project: {
        Area_Code: 1,
        REG: 1,
        REG_NAME: 1,
        CWT: 1,
        CWT_NAME: 1,
        AMP: 1,
        AMP_NAME: 1,
        TAM: 1,
        TAM_NAME: 1,
        DISTRICT: 1,
        MUN: 1,
        MUN_NAME: 1,
        TAO: 1,
        TAO_NAME: 1,
        EA: 1,
        CountPopulation: 1,
        CountWorkingAge: 1,
        ResidentialPersonCount: 1,
        PopulationPersonCount: 1,
        CountBuilding: {
          $ifNull: ["$data.CountBuilding", 0]
        },
        CountUnit: {
          $ifNull: ["$data.CountUnit", 0]
        }
      }
    },
    {
      $sort: {
        _id: 1
      }
    },
    {
      $out: "FinalResultPopulation"
    }
  ],
  {
    allowDiskUse: true
  }
);

db.survey.aggregate([
  {
    $match: {
      EA: "11001011000001",
      SampleType: "b",
      Enlisted: true,
      DeletionDateTime: null
    }
  },
  {
    $group: {
      _id: "$EA",
      countBuilding: {
        $sum: 1
      }
    }
  },
  {
    $out: "TestCheckcountBuilding"
  }
]);

db.survey.aggregate([
  {
    $match: {
      EA: "11001011000001",
      SampleType: "u",
      Enlisted: true,
      DeletionDateTime: null
    }
  },
  {
    $group: {
      _id: "$EA",
      countUnt: {
        $sum: 1
      }
    }
  },
  {
    $out: "TestCheckcountUnit"
  }
]);

db.survey.aggregate([
  {
    $match: {
      SampleType: "u",
      Status: "eye:1,",
      Enlisted: true,
      DeletionDateTime: null
    }
  },
  {
    $count: "TotalUnit"
  }
]);

db.survey.aggregate([
  {
    $match: {
      SampleType: "b",
      Status: "eye:1,",
      Enlisted: true,
      DeletionDateTime: null
    }
  },
  {
    $count: "TotalBuilding"
  }
]);

db.survey.aggregate([
  {
    $match: {
      SampleType: "c",
      Enlisted: true,
      DeletionDateTime: null
    }
  },
  {
    $count: "TotalCommunity"
  }
]);

db.v5.aggregate([
  {
    $project: {
      Source: {
        Name: 1
      },
      SampleId: 1,
      SampleType: 1,
      EA: 1,
      Area_Code: 1,
      Status: 1,
      Count: 1,
      CubicMeterPerMonth: 1,
      WaterBill: 1,
      PumpCount: 1,
      PumpAuto: 1,
      TurbidWater: 1,
      SaltWater: 1,
      Smell: 1,
      FilmOfOil: 1,
      FogWater: 1,
      HardWater: 1,
      Agriculture: 1,
      Service: 1,
      Product: 1,
      Drink: 1,
      Plant: 1,
      Farm: 1,
      CubicMeterBuyingForAgriculture: 1,
      CubicMeterBuyingForService: 1,
      CubicMeterBuyingForProduct: 1,
      CubicMeterBuyingForDrink: 1,
      DoingMWA: 1,
      CubicMeterPerMonthMWA: 1,
      WaterBillMWA: 1,
      TurbidWaterMWA: 1,
      SaltWaterMWA: 1,
      SmellMWA: 1,
      FilmOfOilMWA: 1,
      FogWaterMWA: 1,
      HardWaterMWA: 1,
      AgricultureMWA: 1,
      ServiceMWA: 11,
      ProductMWA: 1,
      DrinkMWA: 1,
      PlantMWA: 1,
      DoingPWA: 1,
      CubicMeterPerMonthPWA: 1,
      WaterBillPWA: 1,
      TurbidWaterPWA: 1,
      SaltWaterPWA: 1,
      SmellPWA: 1,
      FilmOfOilPWA: 1,
      FogWaterPWA: 1,
      HardWaterPWA: 1,
      AgriculturePWA: 1,
      ServicePWA: 1,
      ProductPWA: 1,
      DrinkPWA: 1,
      PlantPWA: 1,
      DoingOther: 1,
      CubicMeterPerMonthOther: 1,
      WaterBillOther: 1,
      TurbidWaterOther: 1,
      SaltWaterOther: 1,
      SmellOther: 1,
      FilmOfOilOther: 1,
      FogWaterOther: 1,
      HardWaterOther: 1,
      AgricultureOther: 1,
      ServiceOther: 1,
      ProductOther: 1,
      DrinkOther: 1,
      PlantOther: 1,
      MeterRentalFee: 1,
      PlumbingPrice: 1,
      PoolCount: 1,
      WaterResourceCount: 1,
      CubicMeterPerMonthPool: 1,
      PumpCountPool: 1,
      PumpAutoPool: 1,
      SaltWaterPool: 1,
      SmellPool: 1,
      FilmOfOilPool: 1,
      FogWaterPool: 1,
      AgriculturePool: 1,
      ServicePool: 1,
      ProductPool: 1,
      DrinkPool: 1,
      PlantPool: 1,
      FarmPool: 1,
      CubicMeterPerMonthIrrigation: 1,
      PumpCountIrrigation: 1,
      PumpAutoIrrigation: 1,
      SaltWaterIrrigation: 1,
      SmellIrrigation: 1,
      FilmOfOilIrrigation: 1,
      FogWaterIrrigation: 1,
      AgricultureIrrigation: 1,
      ServiceIrrigation: 1,
      ProductIrrigation: 1,
      DrinkIrrigation: 1,
      PlantIrrigation: 1,
      FarmIrrigation: 1,
      PumpCountRiver: 1,
      PumpAutoRiver: 1,
      SaltWaterRiver: 1,
      SmellRiver: 1,
      FilmOfOilRiver: 1,
      FogWaterRiver: 1,
      AgricultureRiver: 1,
      ServiceRiver: 1,
      ProductRiver: 1,
      DrinkRiver: 1,
      PlantRiver: 1,
      FarmRiver: 1,
      AgricultureRain: 1,
      ServiceRain: 1,
      ProductRain: 1,
      DrinkRain: 1,
      PlantRain: 1,
      CanComputeCubicMeterGroundWaterForAgriculture: 1,
      CanComputeCubicMeterGroundWaterForService: 1,
      CanComputeCubicMeterGroundWaterForProduct: 1,
      CanComputeCubicMeterGroundWaterForDrink: 1,
      CanComputeCubicMeterPlumbingForAgriculture: 1,
      CanComputeCubicMeterPlumbingForService: 1,
      CanComputeCubicMeterPlumbingForProduct: 1,
      CanComputeCubicMeterPlumbingForDrink: 1,
      CanComputeCubicMeterSurfaceForAgriculture: 1,
      CanComputeCubicMeterSurfaceForService: 1,
      CanComputeCubicMeterSurfaceForProduct: 1,
      CanComputeCubicMeterSurfaceForDrink: 1,
      CanComputeCubicMeterGroundWaterForUse: 1,
      CanComputeCubicMeterForDrink: 1,
      IsAgriculture: 1,
      IsHouseHold: 1,
      IsHouseHoldGoodPlumbing: 1,
      IsAgricultureHasIrrigationField: 1,
      IsHouseHoldHasPlumbingDistrict: 1,
      IsHouseHoldHasPlumbingCountryside: 1,
      IsFactorialWaterQuality: 1,
      IsCommercialWaterQuality: 1,
      CountGroundWater: 1,
      CountPopulation: "$ResidentialPersonCount",
      CountWorkingAge: 1,
      IsFactorial: 1,
      IsFactorialWaterTreatment: 1,
      IsCommunityWaterManagementHasWaterTreatment: 1,
      FieldCommunity: 1,
      AvgWaterHeightCm: 1,
      TimeWaterHeightCm: 1,
      HasntPlumbing: 1,
      IsGovernment: 1,
      IsGovernmentUsage: 1,
      IsGovernmentWaterQuality: 1,
      CommunityNatureDisaster: 1,
      WaterSources: 1,
      IndustryHasWasteWaterTreatment: 1,
      PeopleInFloodedArea: 1,
      CubicMeterGroundWaterForAgriculture: 1,
      CubicMeterGroundWaterForService: 1,
      CubicMeterGroundWaterForProduct: 1,
      CubicMeterGroundWaterForDrink: 1,
      CubicMeterPlumbingForAgriculture: 1,
      CubicMeterPlumbingForService: 342.8571,
      CubicMeterPlumbingForProduct: 1,
      CubicMeterPlumbingForDrink: 1,
      CubicMeterSurfaceForAgriculture: 1,
      CubicMeterSurfaceForService: 1,
      CubicMeterSurfaceForProduct: 1,
      CubicMeterSurfaceForDrink: 1,
      CubicMeterGroundWaterForUse: 1,
      CountCommunity: 1,
      CountCommunityHasDisaster: 1,
      IsAllHouseHoldCountryside: 1,
      IsAllHouseHoldDistrict: 1,
      IsAllFactorial: 1,
      IsAllCommercial: 1,
      CubicMeterForDrink: 1,
      Duplicate: 1,
      AdjustedCubicMeterGroundWaterForAgriculture: 1,
      AdjustedCubicMeterGroundWaterForService: 1,
      AdjustedCubicMeterGroundWaterForProduct: 1,
      AdjustedCubicMeterGroundWaterForDrink: 1,
      AdjustedCubicMeterSurfaceForAgriculture: 1,
      AdjustedCubicMeterSurfaceForService: 1,
      AdjustedCubicMeterSurfaceForProduct: 1,
      AdjustedCubicMeterSurfaceForDrink: 1,
      AdjustedCubicMeterGroundWaterForUse: 1
    }
  },
  {
    $out: "v6"
  }
]);

db.v6.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: false,
      CountPopulation: { $ne: 0 },
      IsHouseHold: 0
    }
  },
  {
    $out: "CheckResolveIsHouseHold"
  }
]);

db.v6.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      SampleType: "u",
      Duplicate: false,
      CountPopulation: { $ne: 0 },
      IsHouseHold: 0
    }
  },
  {
    $out: "UnitCheckResolveIsHouseHold"
  }
]);

db.v6.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      SampleType: "b",
      Duplicate: false,
      CountPopulation: { $ne: 0 },
      IsHouseHold: 0
    }
  },
  {
    $out: "HouseHoldCheckResolveIsHouseHold"
  }
]);

db.v6.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      sumCountPopulation: {
        $sum: "$CountPopulation"
      }
    }
  },
  {
    $match: {
      sumCountPopulation: { $gte: 20000 }
    }
  },
  {
    $out: "CountPopulationOver20000"
  }
]);

db.v6.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Duplicate: false
    }
  },
  {
    $group: {
      _id: {
        $substr: ["$EA", 0, 1]
      },
      sumFieldCommunity: {
        $sum: "$FieldCommunity"
      },
      countRegion: {
        $sum: 1
      }
    }
  },
  {
    $project: {
      avgRegion: {
        $divide: ["$sumFieldCommunity", "$countRegion"]
      }
    }
  },
  {
    $out: "AvgFieldCommunity"
  }
]);

db.v6.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Duplicate: false,
      CountPopulation: { $gte: 20000 }
    }
  },
  {
    $project: {
      IdofOver: "$_id",
      EA: "$EA"
    }
  },
  {
    $out: "DataOver20000"
  }
]);

db.v6.aggregate([
  {
    $match: {
      EA: "44515041044008",
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      sumCountPopulation: {
        $sum: "$CountPopulation"
      },
      maxPopulation: {
        $max: "$CountPopulation"
      },
      countRegion: {
        $sum: 1
      }
    }
  },
  {
    $project: {
      sumCountPopulation: 1,
      maxPopulation: 1,
      countRegion: 1,
      avgRegion: {
        $divide: [
          {
            $subtract: ["$sumCountPopulation", "$maxPopulation"]
          },
          {
            $subtract: ["$countRegion", 1]
          }
        ]
      }
    }
  },
  {
    $out: "AvgFor44515041044008"
  }
]);

db.v6.aggregate([
  {
    $match: {
      EA: "22406052005003",
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      sumCountPopulation: {
        $sum: "$CountPopulation"
      },
      maxPopulation: {
        $max: "$CountPopulation"
      },
      countRegion: {
        $sum: 1
      }
    }
  },
  {
    $project: {
      sumCountPopulation: 1,
      maxPopulation: 1,
      countRegion: 1,
      avgRegion: {
        $divide: [
          {
            $subtract: ["$sumCountPopulation", "$maxPopulation"]
          },
          {
            $subtract: ["$countRegion", 1]
          }
        ]
      }
    }
  },
  {
    $out: "AvgFor22406052005003"
  }
]);

db.v6.aggregate([
  {
    $match: {
      EA: "43101172009011",
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      sumCountPopulation: {
        $sum: "$CountPopulation"
      },
      maxPopulation: {
        $max: "$CountPopulation"
      },
      countRegion: {
        $sum: 1
      }
    }
  },
  {
    $project: {
      sumCountPopulation: 1,
      maxPopulation: 1,
      countRegion: 1,
      avgRegion: {
        $divide: [
          {
            $subtract: ["$sumCountPopulation", "$maxPopulation"]
          },
          {
            $subtract: ["$countRegion", 1]
          }
        ]
      }
    }
  },
  {
    $out: "AvgFor43101172009011"
  }
]);

db.v6.aggregate([
  {
    $match: {
      SampleType: "b",
      IsHouseHold: 0,
      CountPopulation: { $ne: 0 },
      Duplicate: false
    }
  },
  {
    $out: "CheckHouseHold0butPopulationHas2"
  }
]);

db.Survey.aggregate([
  {
    $project: {
      SampleId: 1,
      SampleType: 1,
      BuildingId: 1,
      EA: 1,
      ContainerName: 1,
      BlobName: 1,
      Status: 1,
      Enlisted: { $toBool: false },
      DeletionDateTime: 1
    }
  },
  {
    $out: "SurveyCleaning"
  }
]);

db.blobNameExists.aggregate(
  [
    {
      $match: {
        Exists: true
      }
    },
    {
      $group: {
        _id: "$ContainerName",
        listBlob: {
          $push: "$$ROOT"
        }
      }
    },
    {
      $project: {
        listBlob: "$listBlob.BlobName"
      }
    },
    {
      $out: "BlobExistTrue"
    }
  ],
  {
    allowDiskUse: true
  }
);

db.blobNameExists.aggregate(
  [
    {
      $match: {
        Exists: false
      }
    },
    {
      $group: {
        _id: "$ContainerName",
        listBlob: {
          $push: "$$ROOT"
        }
      }
    },
    {
      $project: {
        listBlob: "$listBlob.BlobName"
      }
    },
    {
      $out: "BlobExistFalse"
    }
  ],
  {
    allowDiskUse: true
  }
);

db.blobNameExists.aggregate(
  [
    {
      $group: {
        _id: "$ContainerName",
        listBlob: {
          $push: "$$ROOT"
        }
      }
    },
    {
      $project: {
        listBlob: "$listBlob.BlobName",
        listEA: "$listBlob.EA",
        IsRun: { $toBool: false }
      }
    },
    {
      $out: "BlobExist"
    }
  ],
  {
    allowDiskUse: true
  }
);

// check EA null => no EA null
db.oldDataProcess.aggregate([
  {
    $match: {
      EA: ""
    }
  },
  {
    $project: {
      id: "$_id"
    }
  },
  {
    $out: "checkEaNull"
  }
]);
// check countPopulation < countWorkingAge
db.oldDataProcess.aggregate([
  {
    $match: {
      CountWorkingAge: {
        $lt: "$CountPopulation"
      }
    }
  },
  {
    $project: {
      id: "$_id"
    }
  },
  {
    $out: "checkWrongData"
  }
]);

db.oldDataProcess.updateMany(
  {
    SampleType: { $ne: "b" }
  },
  {
    $set: {
      CountPopulation: 0
    }
  }
);

db.oldDataProcess.aggregate([
  {
    $project: {
      SampleId: 1,
      SampleType: 1,
      EA: 1,
      Area_Code: 1,
      Status: 1,
      Count: 1,
      CubicMeterPerMonth: 1,
      WaterBill: 1,
      PumpCount: 1,
      PumpAuto: 1,
      TurbidWater: 1,
      SaltWater: 1,
      Smell: 1,
      FilmOfOil: 1,
      FogWater: 1,
      HardWater: 1,
      Agriculture: 1,
      Service: 1,
      Product: 1,
      Drink: 1,
      Plant: 1,
      Farm: 1,
      CubicMeterBuyingForAgriculture: 1,
      CubicMeterBuyingForService: 1,
      CubicMeterBuyingForProduct: 1,
      CubicMeterBuyingForDrink: 1,
      DoingMWA: 1,
      CubicMeterPerMonthMWA: 1,
      WaterBillMWA: 1,
      TurbidWaterMWA: 1,
      SaltWaterMWA: 1,
      SmellMWA: 1,
      FilmOfOilMWA: 1,
      FogWaterMWA: 1,
      HardWaterMWA: 1,
      AgricultureMWA: 1,
      ServiceMWA: 1,
      ProductMWA: 1,
      DrinkMWA: 1,
      PlantMWA: 1,
      DoingPWA: 1,
      CubicMeterPerMonthPWA: 1,
      WaterBillPWA: 1,
      TurbidWaterPWA: 1,
      SaltWaterPWA: 1,
      SmellPWA: 1,
      FilmOfOilPWA: 1,
      FogWaterPWA: 1,
      HardWaterPWA: 1,
      AgriculturePWA: 1,
      ServicePWA: 1,
      ProductPWA: 1,
      DrinkPWA: 1,
      PlantPWA: 1,
      DoingOther: 1,
      CubicMeterPerMonthOther: 1,
      WaterBillOther: 1,
      TurbidWaterOther: 1,
      SaltWaterOther: 1,
      SmellOther: 1,
      FilmOfOilOther: 1,
      FogWaterOther: 1,
      HardWaterOther: 1,
      AgricultureOther: 1,
      ServiceOther: 1,
      ProductOther: 1,
      DrinkOther: 1,
      PlantOther: 1,
      MeterRentalFee: 1,
      PlumbingPrice: 1,
      PoolCount: 1,
      WaterResourceCount: 1,
      CubicMeterPerMonthPool: 1,
      PumpCountPool: 1,
      PumpAutoPool: 1,
      SaltWaterPool: 1,
      SmellPool: 1,
      FilmOfOilPool: 1,
      FogWaterPool: 1,
      AgriculturePool: 1,
      ServicePool: 1,
      ProductPool: 1,
      DrinkPool: 1,
      PlantPool: 1,
      FarmPool: 1,
      CubicMeterPerMonthIrrigation: 1,
      PumpCountIrrigation: 1,
      PumpAutoIrrigation: 1,
      SaltWaterIrrigation: 1,
      SmellIrrigation: 1,
      FilmOfOilIrrigation: 1,
      FogWaterIrrigation: 1,
      AgricultureIrrigation: 1,
      ServiceIrrigation: 1,
      ProductIrrigation: 1,
      DrinkIrrigation: 1,
      PlantIrrigation: 1,
      FarmIrrigation: 1,
      PumpCountRiver: 1,
      PumpAutoRiver: 1,
      SaltWaterRiver: 1,
      SmellRiver: 1,
      FilmOfOilRiver: 1,
      FogWaterRiver: 1,
      AgricultureRiver: 1,
      ServiceRiver: 1,
      ProductRiver: 1,
      DrinkRiver: 1,
      PlantRiver: 1,
      FarmRiver: 1,
      AgricultureRain: 1,
      ServiceRain: 1,
      ProductRain: 1,
      DrinkRain: 1,
      PlantRain: 1,
      CanComputeCubicMeterGroundWaterForAgriculture: 1,
      CanComputeCubicMeterGroundWaterForService: 1,
      CanComputeCubicMeterGroundWaterForProduct: 1,
      CanComputeCubicMeterGroundWaterForDrink: 1,
      CanComputeCubicMeterPlumbingForAgriculture: 1,
      CanComputeCubicMeterPlumbingForService: 1,
      CanComputeCubicMeterPlumbingForProduct: 1,
      CanComputeCubicMeterPlumbingForDrink: 1,
      CanComputeCubicMeterSurfaceForAgriculture: 1,
      CanComputeCubicMeterSurfaceForService: 1,
      CanComputeCubicMeterSurfaceForProduct: 1,
      CanComputeCubicMeterSurfaceForDrink: 1,
      CanComputeCubicMeterGroundWaterForUse: 1,
      CanComputeCubicMeterForDrink: 1,
      IsAgriculture: 1,
      IsHouseHold: 1,
      IsHouseHoldGoodPlumbing: 1,
      IsAgricultureHasIrrigationField: 1,
      IsHouseHoldHasPlumbingDistrict: 1,
      IsHouseHoldHasPlumbingCountryside: 1,
      IsFactorialWaterQuality: 1,
      IsCommercialWaterQuality: 1,
      CountGroundWater: 1,
      CountPopulation: {
        $cond: {
          if: {
            $ne: ["$SampleType", "b"]
          },
          then: "$ResidentialPersonCount",
          else: "$CountPopulation"
        }
      },
      CountWorkingAge: 1,
      IsFactorial: 1,
      IsFactorialWaterTreatment: 1,
      IsCommunityWaterManagementHasWaterTreatment: 1,
      FieldCommunity: 1,
      AvgWaterHeightCm: 1,
      TimeWaterHeightCm: 1,
      HasntPlumbing: 1,
      IsGovernment: 1,
      IsGovernmentUsage: 1,
      IsGovernmentWaterQuality: 1,
      CommunityNatureDisaster: 1,
      WaterSources: 1,
      IndustryHasWasteWaterTreatment: 1,
      PeopleInFloodedArea: 1,
      CubicMeterGroundWaterForAgriculture: 1,
      CubicMeterGroundWaterForService: 1,
      CubicMeterGroundWaterForProduct: 1,
      CubicMeterGroundWaterForDrink: 1,
      CubicMeterPlumbingForAgriculture: 1,
      CubicMeterPlumbingForService: 1,
      CubicMeterPlumbingForProduct: 1,
      CubicMeterPlumbingForDrink: 1,
      CubicMeterSurfaceForAgriculture: 1,
      CubicMeterSurfaceForService: 1,
      CubicMeterSurfaceForProduct: 1,
      CubicMeterSurfaceForDrink: 1,
      CubicMeterGroundWaterForUse: 1,
      CountCommunity: 1,
      CountCommunityHasDisaster: 1,
      IsAllHouseHoldCountryside: 1,
      IsAllHouseHoldDistrict: 1,
      IsAllFactorial: 1,
      IsAllCommercial: 1,
      CubicMeterForDrink: 1,
      Duplicate: 1,
      AdjustedCubicMeterGroundWaterForAgriculture: 1,
      AdjustedCubicMeterGroundWaterForService: 1,
      AdjustedCubicMeterGroundWaterForProduct: 1,
      AdjustedCubicMeterGroundWaterForDrink: 1,
      AdjustedCubicMeterSurfaceForAgriculture: 1,
      AdjustedCubicMeterSurfaceForService: 1,
      AdjustedCubicMeterSurfaceForProduct: 1,
      AdjustedCubicMeterSurfaceForDrink: 1,
      AdjustedCubicMeterGroundWaterForUse: 1
      // ResidentialPersonCount: 1,
      // PopulationPersonCount: 1
    }
  },
  {
    $out: "oldDataProcessClean"
  }
]);

db.oldDataProcess.updateMany(
  {
    SampleType: "u",
    IsHouseHold: 0.0,
    CountPopulation: { $gt: 0.0 }
  },
  {
    $set: {
      CountPopulation: 0
    }
  }
);

db.oldDataProcess.aggregate(
  [
    {
      $group: {
        _id: "$EA",
        IsAgriculture: {
          $sum: "$IsAgriculture"
        },
        IsHouseHold: {
          $sum: "$IsHouseHold"
        },
        IsHouseHoldGoodPlumbing: {
          $sum: "$IsHouseHoldGoodPlumbing"
        },
        IsAgricultureHasIrrigationField: {
          $sum: "$IsAgricultureHasIrrigationField"
        },
        IsHouseHoldHasPlumbingDistrict: {
          $sum: "$IsHouseHoldHasPlumbingDistrict"
        },
        IsHouseHoldHasPlumbingCountryside: {
          $sum: "$IsHouseHoldHasPlumbingCountryside"
        },
        IsFactorialWaterQuality: {
          $sum: "$IsFactorialWaterQuality"
        },
        IsCommercialWaterQuality: {
          $sum: "$IsCommercialWaterQuality"
        },
        CountPopulation: {
          $sum: "$CountPopulation"
        },
        CountWorkingAge: {
          $sum: "$CountWorkingAge"
        },
        IsFactorial: {
          $sum: "$IsFactorial"
        },
        IsFactorialWaterTreatment: {
          $sum: "$IsFactorialWaterTreatment"
        },
        IsCommunityWaterManagementHasWaterTreatment: {
          $sum: "$IsCommunityWaterManagementHasWaterTreatment"
        },
        FieldCommunity: {
          $sum: "$FieldCommunity"
        },
        AvgWaterHeightCm: {
          $avg: "$AvgWaterHeightCm"
        },
        TimeWaterHeightCm: {
          $avg: "$TimeWaterHeightCm"
        },
        HasntPlumbing: {
          $avg: "$HasntPlumbing"
        },
        IsGovernment: {
          $sum: "$IsGovernment"
        },
        IsGovernmentUsage: {
          $sum: "$IsGovernmentUsage"
        },
        IsGovernmentWaterQuality: {
          $sum: "$IsGovernmentWaterQuality"
        },
        CommunityNatureDisaster: {
          $sum: "$CommunityNatureDisaster"
        },
        IndustryHasWasteWaterTreatment: {
          $sum: "$IndustryHasWasteWaterTreatment"
        },
        PeopleInFloodedArea: {
          $sum: "$PeopleInFloodedArea"
        },
        CountCommunity: {
          $sum: "$CountCommunity"
        },
        CountCommunityHasDisaster: {
          $sum: "$CountCommunityHasDisaster"
        },
        IsAllHouseHoldCountryside: {
          $sum: "$IsAllHouseHoldCountryside"
        },
        IsAllHouseHoldDistrict: {
          $sum: "$IsAllHouseHoldDistrict"
        },
        IsAllFactorial: {
          $sum: "$IsAllFactorial"
        },
        IsAllCommercial: {
          $sum: "$IsAllCommercial"
        }
      }
    },
    {
      $project: {
        IsAgriculture: 1,
        IsHouseHold: 1,
        IsHouseHoldGoodPlumbing: 1,
        IsAgricultureHasIrrigationField: 1,
        IsHouseHoldHasPlumbingDistrict: 1,
        IsHouseHoldHasPlumbingCountryside: 1,
        IsFactorialWaterQuality: 1,
        IsCommercialWaterQuality: 1,
        CountPopulation: 1,
        CountWorkingAge: 1,
        IsFactorial: 1,
        IsFactorialWaterTreatment: 1,
        IsCommunityWaterManagementHasWaterTreatment: 1,
        FieldCommunity: 1,
        AvgWaterHeightCm: 1,
        TimeWaterHeightCm: 1,
        HasntPlumbing: 1,
        IsGovernment: 1,
        IsGovernmentUsage: 1,
        IsGovernmentWaterQuality: 1,
        CommunityNatureDisaster: 1,
        IndustryHasWasteWaterTreatment: 1,
        PeopleInFloodedArea: 1,
        CountCommunity: 1,
        CountCommunityHasDisaster: 1,
        IsAllHouseHoldCountryside: 1,
        IsAllHouseHoldDistrict: 1,
        IsAllFactorial: 1,
        IsAllCommercial: 1,
        CountGroundWaterUnit: {
          $toInt: 0
        },
        CountGroundWaterCom: {
          $toInt: 0
        },
        WaterSourcesUnit: {
          $toInt: 0
        },
        WaterSourcesCom: {
          $toInt: 0
        }
      }
    },
    {
      $out: "ResultDataEA"
    }
  ],
  {
    allowDiskUse: true
  }
);

db.oldDataProcess.aggregate(
  [
    {
      $group: {
        _id: "$Area_Code",
        CubicMeterGroundWaterForAgriculture: {
          $sum: "$CubicMeterGroundWaterForAgriculture"
        },
        CubicMeterGroundWaterForService: {
          $sum: "$CubicMeterGroundWaterForService"
        },
        CubicMeterGroundWaterForProduct: {
          $sum: "$CubicMeterGroundWaterForProduct"
        },
        CubicMeterGroundWaterForDrink: {
          $sum: "$CubicMeterGroundWaterForDrink"
        },
        CubicMeterPlumbingForAgriculture: {
          $sum: "$CubicMeterPlumbingForAgriculture"
        },
        CubicMeterPlumbingForService: {
          $sum: "$CubicMeterPlumbingForService"
        },
        CubicMeterPlumbingForProduct: {
          $sum: "$CubicMeterPlumbingForProduct"
        },
        CubicMeterPlumbingForDrink: {
          $sum: "$CubicMeterPlumbingForDrink"
        },
        CubicMeterSurfaceForAgriculture: {
          $sum: "$CubicMeterSurfaceForAgriculture"
        },
        CubicMeterSurfaceForService: {
          $sum: "$CubicMeterSurfaceForService"
        },
        CubicMeterSurfaceForProduct: {
          $sum: "$CubicMeterSurfaceForProduct"
        },
        CubicMeterSurfaceForDrink: {
          $sum: "$CubicMeterSurfaceForDrink"
        },
        CubicMeterGroundWaterForUse: {
          $sum: "$CubicMeterGroundWaterForUse"
        }
      }
    },
    {
      $project: {
        CubicMeterGroundWaterForAgriculture: 1,
        CubicMeterGroundWaterForService: 1,
        CubicMeterGroundWaterForProduct: 1,
        CubicMeterGroundWaterForDrink: 1,
        CubicMeterPlumbingForAgriculture: 1,
        CubicMeterPlumbingForService: 1,
        CubicMeterPlumbingForProduct: 1,
        CubicMeterPlumbingForDrink: 1,
        CubicMeterSurfaceForAgriculture: 1,
        CubicMeterSurfaceForService: 1,
        CubicMeterSurfaceForProduct: 1,
        CubicMeterSurfaceForDrink: 1,
        CubicMeterGroundWaterForUse: 1,
        CountGroundWaterUnit: {
          $toInt: 0
        },
        CountGroundWaterCom: {
          $toInt: 0
        },
        WaterSourcesUnit: {
          $toInt: 0
        },
        WaterSourcesCom: {
          $toInt: 0
        }
      }
    },
    { $out: "ResultDataAreaCode" }
  ],
  {
    allowDiskUse: true
  }
);

db.Survey.updateMany(
  {},
  {
    $set: {
      Enlisted: false
    }
  }
);

db.Survey.aggregate([
  {
    $match: {
      Enlisted: false
    }
  },
  {
    $count: "countTrue"
  },
  {
    $out: "CountTrueEnlistedSurvey"
  }
]);

db.oldDataProcess.aggregate([
  {
    $match: {
      IsHouseHold: 0,
      IsAgriculture: 0,
      IsAllFactorial: 0,
      IsAllCommercial: 0,
      HasntPlumbing: 0
    }
  },
  {
    $count: "count"
  },
  {
    $out: "CountWithOutGHasntPlumbing0"
  }
]);
