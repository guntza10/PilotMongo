// 1.ดัชนีชี้วัดการจัดการน้ำมิติต้นทุนทรัพยากรน้ำ (Resources, R)
// ->(6) ปริมาณน้ำบาดาลที่พัฒนามาใช้ต่อประชากร => คำนวณได้
// CubicMeterGroundWaterForUse
// CountPopulation
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE",
      AdjustedCubicMeterGroundWaterForUse: "FALSE",
      CanComputeCubicMeterGroundWaterForUse: "True"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumCubicMeterGroundWaterForUse: {
        $sum: "$CubicMeterGroundWaterForUse"
      },
      sumPopulation: {
        $sum: "$CountPopulation"
      }
    }
  },
  {
    $project: {
      DevGroundWaterForUse: {
        $cond: {
          if: {
            $eq: ["$sumPopulation", 0]
          },
          then: 0,
          else: {
            $divide: ["$sumCubicMeterGroundWaterForUse", "$sumPopulation"]
          }
        }
      }
    }
  },
  { $out: "TestDevGroundWaterForUse" }
]);

// 2.ดัชนีชี้วัดการจัดการน้ำมิติการจัดการน้ำเพื่อการอุปโภค บริโภค (Household consumption, H)
// (1) ครัวเรือนในชนบทที่มีน้ำประปาใช้ต่อคร้วเรือนในชนบททั้งหมด => คำนวณได้
// IsHouseHoldHasPlumbingCountryside
// IsAllHouseHoldCountryside
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumIsHouseHoldHasPlumbingCountryside: {
        $sum: "$IsHouseHoldHasPlumbingCountryside"
      },
      sumIsAllHouseHoldCountryside: {
        $sum: "$IsAllHouseHoldCountryside"
      }
    }
  },
  {
    $project: {
      HouseHoldHasPlumbingCountryside: {
        $cond: {
          if: {
            $eq: ["$sumIsAllHouseHoldCountryside", 0]
          },
          then: { $multiply: [0, 100] },
          else: {
            $multiply: [
              {
                $divide: [
                  "$sumIsHouseHoldHasPlumbingCountryside",
                  "$sumIsAllHouseHoldCountryside"
                ]
              },
              100
            ]
          }
        }
      }
    }
  },
  { $out: "TestHouseHoldHasPlumbingCountryside" }
]);

// 2.ดัชนีชี้วัดการจัดการน้ำมิติการจัดการน้ำเพื่อการอุปโภค บริโภค (Household consumption, H)
// (2) ครัวเรือนในเขตเมืองที่มีน้ำประปาใช้ต่อคร้วเรือนในเขตเมืองทั้งหมด => คำนวณได้
// IsHouseHoldHasPlumbingDistrict
// IsAllHouseHoldDistrict
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumIsHouseHoldHasPlumbingDistrict: {
        $sum: "$IsHouseHoldHasPlumbingDistrict"
      },
      sumIsAllHouseHoldDistrict: {
        $sum: "$IsAllHouseHoldDistrict"
      }
    }
  },
  {
    $project: {
      HouseHoldHasPlumbingDistrict: {
        $cond: {
          if: {
            $eq: ["$sumIsAllHouseHoldDistrict", 0]
          },
          then: { $multiply: [0, 100] },
          else: {
            $multiply: [
              {
                $divide: [
                  "$sumIsHouseHoldHasPlumbingDistrict",
                  "$sumIsAllHouseHoldDistrict"
                ]
              },
              100
            ]
          }
        }
      }
    }
  },
  { $out: "TestHouseHoldHasPlumbingDistrict" }
]);

// 2.ดัชนีชี้วัดการจัดการน้ำมิติการจัดการน้ำเพื่อการอุปโภค บริโภค (Household consumption, H)
// (3) สถานที่ราชการที่มีน้ำประปาใช้ต่อสถานที่ราชการทั้งหมด => คำนวณได้
// IsGovernmentUsage
// IsGovernment
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumIsGovernmentUsage: {
        $sum: "$IsGovernmentUsage"
      },
      sumIsGovernment: {
        $sum: "$IsGovernment"
      }
    }
  },
  {
    $project: {
      PlumbingGovernmentUsage: {
        $cond: {
          if: {
            $eq: ["$sumIsGovernment", 0]
          },
          then: { $multiply: [0, 100] },
          else: {
            $multiply: [
              {
                $divide: ["$sumIsGovernmentUsage", "$sumIsGovernment"]
              },
              100
            ]
          }
        }
      }
    }
  },
  {
    $out: "TestPlumbingGovernmentUsage"
  }
]);

// 2.ดัชนีชี้วัดการจัดการน้ำมิติการจัดการน้ำเพื่อการอุปโภค บริโภค (Household consumption, H)
// (4) ครัวเรือนที่มีน้ำประปาคุณภาพดีต่อคร้วเรือนทั้งหมด => คำนวณได้
// IsHouseHoldGoodPlumbing
// IsHouseHold
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumIsHouseHoldGoodPlumbing: {
        $sum: "$IsHouseHoldGoodPlumbing"
      },
      sumIsHouseHold: {
        $sum: "$IsHouseHold"
      }
    }
  },
  {
    $project: {
      HouseHoldGoodPlumbing: {
        $cond: {
          if: {
            $eq: ["$sumIsHouseHold", 0]
          },
          then: { $multiply: [0, 100] },
          else: {
            $multiply: [
              { $divide: ["$sumIsHouseHoldGoodPlumbing", "$sumIsHouseHold"] },
              100
            ]
          }
        }
      }
    }
  },
  {
    $out: "TestHouseHoldGoodPlumbing"
  }
]);

// 2.ดัชนีชี้วัดการจัดการน้ำมิติการจัดการน้ำเพื่อการอุปโภค บริโภค (Household consumption, H)
// (5) ปริมาณการใช้น้ำอุปโภค บริโภคต่อคน => คำนวณได้
// CubicMeterGroundWaterForDrink
// CubicMeterPlumbingForDrink
// CubicMeterSurfaceForDrink
// CountPopulation
db.c88.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: "FALSE",
      // CubicMeterGroundWaterForDrink
      AdjustedCubicMeterGroundWaterForDrink: "FALSE",
      CanComputeCubicMeterGroundWaterForDrink: "True",
      // CubicMeterPlumbingForDrink
      CanComputeCubicMeterPlumbingForDrink: "True",
      // CubicMeterSurfaceForDrink
      AdjustedCubicMeterSurfaceForDrink: "FALSE",
      CanComputeCubicMeterSurfaceForDrink: "True"
    }
  },
  {
    $group: {
      _id: "$Area_Code",
      sumCubicMeterGroundWaterForDrink: {
        $sum: "$CubicMeterGroundWaterForDrink"
      },
      sumCubicMeterPlumbingForDrink: {
        $sum: "$CubicMeterPlumbingForDrink"
      },
      sumCubicMeterSurfaceForDrink: {
        $sum: "$CubicMeterSurfaceForDrink"
      },
      sumCountPopulation: {
        $sum: "$CountPopulation"
      }
    }
  },
  {
    $project: {
      WaterUsagePerPeople: {
        $divide: [
          {
            $add: [
              "$sumCubicMeterGroundWaterForDrink",
              "$sumCubicMeterPlumbingForDrink",
              "$sumCubicMeterSurfaceForDrink"
            ]
          },
          "$sumCountPopulation"
        ]
      }
    }
  },
  {
    $out: "TestWaterUsagePerPeople"
  }
]);

db.c88.find({
  Area_Code: "380101"
});

// Edit Data
db.c88.update(
  {
    Area_Code: { $ne: null },
    Duplicate: "FALSE",
    IsHouseHold: 1
  },
  {
    $set: {
      IsAllHouseHoldDistrict: {
        $cond: {
          if: {
            $and: [
              { Ea: { $ne: null } },
              { $eq: [{ $substr: ["$EA", 7, 1] }, "1"] }
            ]
          },
          then: 1,
          else: 0
        }
      },
      IsAllHouseHoldCountryside: {
        $cond: {
          if: {
            $and: [
              { EA: { $ne: null } },
              { $eq: [{ $substr: ["$EA", 7, 1] }, "2"] }
            ]
          },
          then: 1,
          else: 0
        }
      }
    }
  },
  { multi: true }
);
// many aggregate in update
db.c88.update(
  {
    Area_Code: { $ne: null },
    Duplicate: "FALSE",
    IsHouseHold: 1
  },
  [
    {
      $set: {
        IsAllHouseHoldDistrict: {
          $cond: {
            if: {
              $and: [
                { Ea: { $ne: null } },
                { $eq: [{ $substr: ["$EA", 7, 1] }, "1"] }
              ]
            },
            then: 1,
            else: 0
          }
        }
      }
    },
    {
      $set: {
        IsAllHouseHoldCountryside: {
          $cond: {
            if: {
              $and: [
                { EA: { $ne: null } },
                { $eq: [{ $substr: ["$EA", 7, 1] }, "2"] }
              ]
            },
            then: 1,
            else: 0
          }
        }
      }
    }
  ],
  { multi: true }
);
db.version();

// Test Join
db.BaseCollection3.aggregate([
  {
    $lookup: {
      from: "TestDevGroundWaterForUse",
      localField: "_id",
      foreignField: "_id",
      as: "collection0"
    }
  },
  {
    $lookup: {
      from: "TestHouseHoldGoodPlumbing",
      localField: "_id",
      foreignField: "_id",
      as: "collection1"
    }
  },
  {
    $lookup: {
      from: "TestHouseHoldHasPlumbingDistrict",
      localField: "_id",
      foreignField: "_id",
      as: "collection2"
    }
  },
  {
    $lookup: {
      from: "TestHouseHoldHasPlumbingCountryside",
      localField: "_id",
      foreignField: "_id",
      as: "collection3"
    }
  },
  {
    $replaceRoot: {
      newRoot: {
        $mergeObjects: [
          { $arrayElemAt: ["$collection0", 0] },
          { $arrayElemAt: ["$collection1", 0] },
          { $arrayElemAt: ["$collection2", 0] },
          { $arrayElemAt: ["$collection3", 0] },
          "$$ROOT"
        ]
      }
    }
  },
  {
    $project: {
      collection0: 0,
      collection1: 0,
      collection2: 0,
      collection3: 0
    }
  },
  {
    $out: "TestJoinFinal4"
  }
]);

db.c88.aggregate([
  {
    $match: {
      Area_Code: { $ne: null }
    }
  },
  {
    $group: {
      _id: "$Area_Code"
    }
  },
  {
    $out: "BaseCollection"
  }
]);

db.ea.aggregate([
  {
    $group: {
      _id: "$Area_Code"
    }
  },
  {
    $sort: {
      _id: 1
    }
  },
  // {
  //   $project: {
  //     DevGroundWaterForUse: null,
  //     HouseHoldGoodPlumbing: null,
  //     HouseHoldHasPlumbingDistrict: null,
  //     HouseHoldHasPlumbingCountryside: null
  //   }
  // },
  {
    $out: "BaseCollection"
  }
]);

db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $project: {
      checkError: {
        $gt: ["$ResidentialPersonCount", "$PopulationPersonCount"]
      }
    }
  },
  {
    $out: "checkPersonCount"
  }
]);

// errorIsAgriculture
db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $project: {
      checkError: {
        $lt: ["$IsAgriculture", "$IsAgricultureHasIrrigationField"]
      }
    }
  },
  {
    $out: "errorIsAgriculture"
  }
]);

// errorIsHouseHold
db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $project: {
      checkError: {
        $or: [
          {
            $lt: ["$IsHouseHold", "$IsHouseHoldGoodPlumbing"]
          },
          {
            $lt: ["$IsHouseHold", "$IsHouseHoldHasPlumbingDistrict"]
          },
          {
            $lt: ["$IsHouseHold", "$IsHouseHoldHasPlumbingCountryside"]
          }
        ]
      }
    }
  },
  {
    $out: "errorIsHouseHold"
  }
]);

// errorIsFactorial
db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $project: {
      checkError: {
        $or: [
          {
            $lt: ["$IsAllFactorial", "$IsFactorial"]
          },
          {
            $lt: ["$IsAllFactorial", "$IndustryHasWasteWaterTreatment"]
          },
          {
            $lt: ["$IsAllFactorial", "$IsFactorialWaterTreatment"]
          },
          {
            $lt: ["$IsAllFactorial", "$IsFactorialWaterQuality"]
          },
          {
            $lt: ["$IsFactorial", "$IndustryHasWasteWaterTreatment"]
          },
          {
            $lt: [
              "$IndustryHasWasteWaterTreatment",
              "$IsFactorialWaterTreatment"
            ]
          }
        ]
      }
    }
  },
  {
    $out: "errorIsFactorial"
  }
]);

// errorIsAllCommercial
db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $project: {
      checkError: {
        $lt: ["$IsAllCommercial", "$IsCommercialWaterQuality"]
      }
    }
  },
  {
    $out: "errorIsAllCommercial"
  }
]);

// test
db.v5.aggregate(
  [
    {
      $match: {
        EA: { $ne: null },
        Area_Code: { $ne: null },
        Duplicate: false
      }
    },
    {
      $group: {
        _id: "$CWT",
        listCwt: {
          $push: {
            _id: "$_id",
            SampleId: "$SampleId,SampleId",
            SampleType: "$SampleType,",
            EA: "$EA",
            Status: "$Status",
            CountPopulation: "$CountPopulation",
            CountWorkingAge: "$CountWorkingAge",
            ResidentialPersonCount: "$ResidentialPersonCount",
            PopulationPersonCount: "$PopulationPersonCount",
            Area_Code: "$Area_Code,",
            REG: "$REG",
            REG_NAME: "$REG_NAME",
            CWT: "$CWT",
            CWT_NAME: "$CWT_NAME",
            AMP: "$AMP",
            AMP_NAME: "$AMP_NAME",
            TAM: "$TAM",
            TAM_NAME: "$TAM_NAME",
            DISTRICT: "$DISTRICT",
            MUN: "$MUN",
            MUN_NAME: "$MUN_NAME",
            TAO: "$TAO",
            TAO_NAME: "$TAO_NAME"
          }
        }
      }
    },
    {
      $out: "Gunt78"
    }
  ],
  {
    allowDiskUse: true
  }
);

db.v5.aggregate([
  {
    $match: {
      EA: "11001021000025",
      Area_Code: { $ne: null },
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      sumCountPopulation: {
        $sum: "$CountPopulation"
      },
      sumCountWorkingAge: {
        $sum: "$CountWorkingAge"
      },
      sumResidentialPersonCount: {
        $sum: "$ResidentialPersonCount"
      },
      sumPopulationPersonCount: {
        $sum: "$PopulationPersonCount"
      }
    }
  },
  {
    $out: "sumTestPao"
  }
]);

db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      SampleType: "u",
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      countUnit: {
        $sum: 1
      }
    }
  },
  {
    $out: "countUnit"
  }
]);

db.v5.aggregate([
  {
    $match: {
      EA: { $ne: null },
      Area_Code: { $ne: null },
      SampleType: "b",
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      countBuilding: {
        $sum: 1
      }
    }
  },
  {
    $out: "countBuilding"
  }
]);

db.v5.count({ EA: "11001011000001", SampleType: "b", Duplicate: false });
db.v5.aggregate([
  {
    $match: {
      EA: "11001011000001",
      SampleType: "b",
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      sumB: {
        $sum: 1
      }
    }
  },
  {
    $out: "TestCountBuilding"
  }
]);

db.v5.aggregate([
  {
    $match: {
      EA: "11001011000001",
      SampleType: "u",
      Duplicate: false
    }
  },
  {
    $group: {
      _id: "$EA",
      sumB: {
        $sum: 1
      }
    }
  },
  {
    $out: "TestCountUnit"
  }
]);

db.survey.aggregate([
  {
    $match: {
      SampleType: "b",
      Enlisted: true,
      DeletionDateTime: null
    }
  },
  {
    $group: {
      _id: "$EA",
      countBuilding: {
        $sum: 1
      }
    }
  },
  {
    $out: "countBuilding"
  }
]);

db.survey.aggregate([
  {
    $match: {
      SampleType: "u",
      Enlisted: true,
      DeletionDateTime: null
    }
  },
  {
    $group: {
      _id: "$EA",
      countBuilding: {
        $sum: 1
      }
    }
  },
  {
    $out: "countUnit"
  }
]);

db.ea.aggregate(
  [
    {
      $lookup: {
        from: "countBuilding",
        localField: "_id",
        foreignField: "_id",
        as: "data1"
      }
    },
    {
      $unwind: {
        path: "$data1",
        preserveNullAndEmptyArrays: true
      }
    },
    {
      $lookup: {
        from: "countUnit",
        localField: "_id",
        foreignField: "_id",
        as: "data2"
      }
    },
    {
      $unwind: {
        path: "$data2",
        preserveNullAndEmptyArrays: true
      }
    },
    {
      $project: {
        Area_Code: 1,
        REG: 1,
        REG_NAME: 1,
        CWT: 1,
        CWT_NAME: 1,
        AMP: 1,
        AMP_NAME: 1,
        TAM: 1,
        TAM_NAME: 1,
        DISTRICT: 1,
        MUN: 1,
        MUN_NAME: 1,
        TAO: 1,
        TAO_NAME: 1,
        EA: 1,
        CountBuilding: {
          $ifNull: ["$data1.countBuilding", 0]
        },
        CountUnit: {
          $ifNull: ["$data2.countBuilding", 0]
        }
      }
    },
    {
      $sort: {
        _id: 1
      }
    },
    {
      $out: "countBuildingAndUnit"
    }
  ],
  {
    allowDiskUse: true
  }
);

db.ResultPopulation.aggregate(
  [
    {
      $lookup: {
        from: "countBuildingAndUnit",
        localField: "_id",
        foreignField: "_id",
        as: "data"
      }
    },
    {
      $unwind: {
        path: "$data",
        preserveNullAndEmptyArrays: true
      }
    },
    {
      $project: {
        Area_Code: 1,
        REG: 1,
        REG_NAME: 1,
        CWT: 1,
        CWT_NAME: 1,
        AMP: 1,
        AMP_NAME: 1,
        TAM: 1,
        TAM_NAME: 1,
        DISTRICT: 1,
        MUN: 1,
        MUN_NAME: 1,
        TAO: 1,
        TAO_NAME: 1,
        EA: 1,
        CountPopulation: 1,
        CountWorkingAge: 1,
        ResidentialPersonCount: 1,
        PopulationPersonCount: 1,
        CountBuilding: {
          $ifNull: ["$data.CountBuilding", 0]
        },
        CountUnit: {
          $ifNull: ["$data.CountUnit", 0]
        }
      }
    },
    {
      $sort: {
        _id: 1
      }
    },
    {
      $out: "FinalResultPopulation"
    }
  ],
  {
    allowDiskUse: true
  }
);


db.survey.aggregate([
  {
    $match: {
      EA:"11001011000001",
      SampleType: "b",
      Enlisted: true,
      DeletionDateTime: null
    }
  },
  {
    $group: {
      _id: "$EA",
      countBuilding: {
        $sum: 1
      }
    }
  },
  {
    $out: "TestCheckcountBuilding"
  }
]);

db.survey.aggregate([
  {
    $match: {
      EA:"11001011000001",
      SampleType: "u",
      Enlisted: true,
      DeletionDateTime: null
    }
  },
  {
    $group: {
      _id: "$EA",
      countUnt: {
        $sum: 1
      }
    }
  },
  {
    $out: "TestCheckcountUnit"
  }
]);